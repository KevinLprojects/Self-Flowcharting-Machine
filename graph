digraph {
	4309716496 -> 4309717456 [label=""]
	4309717456 -> 4309040352 [label=""]
	4309717456 -> 4309040656 [label=""]
	4309040352 -> 4309040656 [label=""]
	4309040656 -> 4305775952 [label=""]
	4305775952 -> 4305410784 [label=""]
	4305775952 -> 4305474896 [label=""]
	4305410784 -> 4309666128 [label=""]
	4305474896 -> 4309666128 [label=""]
	4309666128 -> 4310225200 [label=""]
	4310225200 -> 4310224960 [label=""]
	4310225200 -> 4310403792 [label=""]
	4310224960 -> 4309443280 [label=""]
	4310403792 -> 4310404016 [label=""]
	4310403792 -> 4309443088 [label=""]
	4310404016 -> 4309443280 [label=""]
	4309443088 -> 4309443280 [label=""]
	4309737984 -> 4309737632 [label=""]
	4309737632 -> 4310449392 [label=""]
	4310449392 -> 4310448592 [label=""]
	4310448592 -> 4310448752 [label=""]
	4310448592 -> 4310449232 [label=""]
	4310449232 -> 4310449552 [label=""]
	4310449552 -> 4310449712 [label=""]
	4310449712 -> 4310449872 [label=""]
	4310450032 -> 4310564944 [label=""]
	4310564944 -> 4310565104 [label=""]
	4310565104 -> 4310565264 [label=""]
	4310565264 -> 4310565424 [label=""]
	4310565424 -> 4310565584 [label=""]
	4310565584 -> 4310565744 [label=""]
	4310565744 -> 4310565904 [label=""]
	4310565904 -> 4310566064 [label=""]
	4310565904 -> 4310566224 [label=""]
	4310566064 -> 4310566224 [label=""]
	4310566224 -> 4310566384 [label=""]
	4310566384 -> 4310566544 [label=""]
	4310566704 -> 4310566864 [label=""]
	4310566864 -> 4310567024 [label=""]
	4310566864 -> 4310567184 [label=""]
	4310567024 -> 4310567184 [label=""]
	4310567184 -> 4310567344 [label=""]
	4310567344 -> 4310567504 [label=""]
	4310567504 -> 4310567664 [label=""]
	4310567824 -> 4310567984 [label=""]
	4310567984 -> 4310568144 [label=""]
	4310568304 -> 4310568464 [label=""]
	4310568464 -> 4310568624 [label=""]
	4310568624 -> 4310568784 [label=""]
	4310568784 -> 4310568944 [label=""]
	4310569104 -> 4310569264 [label=""]
	4310569264 -> 4310569424 [label=""]
	4310569424 -> 4310569584 [label=""]
	4310569584 -> 4310569744 [label=""]
	4310569744 -> 4310569904 [label=""]
	4310569904 -> 4310570064 [label=""]
	4310570064 -> 4310570224 [label=""]
	4310570224 -> 4310570384 [label=""]
	4310570544 -> 4310570704 [label=""]
	4310570704 -> 4310570864 [label=""]
	4310570704 -> 4310571024 [label=""]
	4310570864 -> 4310571024 [label=""]
	4310571184 -> 4310571344 [label=""]
	4310571504 -> 4310571664 [label=""]
	4310571664 -> 4310571824 [label=""]
	4310571664 -> 4310571984 [label=""]
	4310571824 -> 4310571984 [label=""]
	4310571984 -> 4310572144 [label=""]
	4310572304 -> 4310572464 [label=""]
	4310572464 -> 4310572624 [label=""]
	4310572624 -> 4310572784 [label=""]
	4310572784 -> 4310572944 [label=""]
	4310572944 -> 4310573104 [label=""]
	4310573104 -> 4310573264 [label=""]
	4310573264 -> 4310573424 [label=""]
	4310573424 -> 4310573584 [label=""]
	4310573584 -> 4310573744 [label=""]
	4310573744 -> 4310573904 [label=""]
	4310573904 -> 4310574064 [label=""]
	4310573904 -> 4310576624 [label=""]
	4310574064 -> 4310574224 [label=""]
	4310574224 -> 4310574384 [label=""]
	4310574384 -> 4310574544 [label=""]
	4310574384 -> 4310574704 [label=""]
	4310574544 -> 4310574704 [label=""]
	4310574864 -> 4310575024 [label=""]
	4310575024 -> 4310575184 [label=""]
	4310575024 -> 4310575344 [label=""]
	4310575184 -> 4310575344 [label=""]
	4310575344 -> 4310575504 [label=""]
	4310575344 -> 4310576144 [label=""]
	4310575504 -> 4310575664 [label=""]
	4310575664 -> 4310575824 [label=""]
	4310576144 -> 4310576304 [label=""]
	4310576304 -> 4310576784 [label=""]
	4310576624 -> 4310576784 [label=""]
	4310576784 -> 4310576944 [label=""]
	4310576944 -> 4310577104 [label=""]
	4310577104 -> 4310577264 [label=""]
	4310577264 -> 4310577424 [label=""]
	4310577584 -> 4310577744 [label=""]
	4310577744 -> 4310577904 [label=""]
	4310577904 -> 4310578064 [label=""]
	4310578224 -> 4310578384 [label=""]
	4310578384 -> 4310578544 [label=""]
	4310578384 -> 4310578864 [label=""]
	4310579024 -> 4310579184 [label=""]
	4310579184 -> 4310579344 [label=""]
	4310579184 -> 4310579504 [label=""]
	4310579344 -> 4310579504 [label=""]
	4310579504 -> 4310579664 [label=""]
	4310579824 -> 4310579984 [label=""]
	4310580144 -> 4310580304 [label=""]
	4310580304 -> 4310580464 [label=""]
	4310580304 -> 4310580624 [label=""]
	4310580464 -> 4310580624 [label=""]
	4310580624 -> 4310580784 [label=""]
	4310580944 -> 4310581104 [label=""]
	4310581104 -> 4310630480 [label=""]
	4310581104 -> 4310630800 [label=""]
	4310630480 -> 4310630640 [label=""]
	4310630640 -> 4310630800 [label=""]
	4310630800 -> 4310630960 [label=""]
	4310631120 -> 4310631280 [label=""]
	4310631280 -> 4310631440 [label=""]
	4310631600 -> 4310631760 [label=""]
	4310631760 -> 4310631920 [label=""]
	4310631760 -> 4310633200 [label=""]
	4310631920 -> 4310632080 [label=""]
	4310632080 -> 4310632240 [label=""]
	4310632240 -> 4310632400 [label=""]
	4310632240 -> 4310632720 [label=""]
	4310633200 -> 4310633360 [label=""]
	4310633360 -> 4310633520 [label=""]
	4310633360 -> 4310633680 [label=""]
	4310633520 -> 4310633680 [label=""]
	4310633840 -> 4310634000 [label=""]
	4310634000 -> 4310634160 [label=""]
	4310634160 -> 4310634320 [label=""]
	4310634320 -> 4310634480 [label=""]
	4310634480 -> 4310634640 [label=""]
	4310634640 -> 4310634800 [label=""]
	4310634640 -> 4310635440 [label=""]
	4310634800 -> 4310635120 [label=""]
	4310635120 -> 4310635280 [label=""]
	4310635280 -> 4310635920 [label=""]
	4310635440 -> 4310635600 [label=""]
	4310635440 -> 4310635920 [label=""]
	4310635600 -> 4310635920 [label=""]
	4310635920 -> 4310636080 [label=""]
	4310635920 -> 4310636400 [label=""]
	4310636080 -> 4310636240 [label=""]
	4310636240 -> 4310636400 [label=""]
	4310636560 -> 4310636720 [label=""]
	4310636720 -> 4310636880 [label=""]
	4310636880 -> 4310637040 [label=""]
	4310637040 -> 4310637200 [label=""]
	4310637200 -> 4310637360 [label=""]
	4310637360 -> 4310637520 [label=""]
	4310637520 -> 4310637680 [label=""]
	4310637680 -> 4310637840 [label=""]
	4310637840 -> 4310638000 [label=""]
	4310638000 -> 4310638160 [label=""]
	4310638160 -> 4310638320 [label=""]
	4310638160 -> 4310638960 [label=""]
	4310638320 -> 4310638480 [label=""]
	4310638480 -> 4310638640 [label=""]
	4310638960 -> 4310639120 [label=""]
	4310638960 -> 4310639440 [label=""]
	4310639120 -> 4310639280 [label=""]
	4310639280 -> 4310639440 [label=""]
	4310639600 -> 4310639760 [label=""]
	4310639760 -> 4310639920 [label=""]
	4310639920 -> 4310640080 [label=""]
	4310640240 -> 4310640400 [label=""]
	4310640560 -> 4310640720 [label=""]
	4310640720 -> 4310640880 [label=""]
	4310640880 -> 4310641040 [label=""]
	4310641040 -> 4310641200 [label=""]
	4310641200 -> 4310641360 [label=""]
	4310641360 -> 4310641520 [label=""]
	4310641680 -> 4310641840 [label=""]
	4310641840 -> 4310642000 [label=""]
	4310641840 -> 4310642320 [label=""]
	4309716496 [label="def if_test():" shape=box]
	4309717456 [label="if True:" shape=diamond]
	4309040352 [label="pass#1" shape=box]
	4309040656 [label="pass#2" shape=box]
	4305775952 [label="if True:" shape=diamond]
	4305410784 [label="pass#3" shape=box]
	4305474896 [label="pass#4" shape=box]
	4309666128 [label="pass#5" shape=box]
	4310225200 [label="if True:" shape=diamond]
	4310224960 [label="pass#6" shape=box]
	4310403792 [label="elif True:" shape=diamond]
	4310404016 [label="pass#7" shape=box]
	4309443088 [label="pass#8" shape=box]
	4309443280 [label="pass#9" shape=box]
	4309737984 [label="import sys" shape=box]
	4309737632 [label="import graphviz" shape=box]
	4310449392 [label="def generic_flow(block):" shape=box]
	4310448592 [label="if len(block.children) != 0:" shape=diamond]
	4310448752 [label="Edge(block, block.children[0])" shape=box]
	4310449232 [label="if block.parent is not None:" shape=diamond]
	4310449552 [label="self_index = block.parent.children.index(block)" shape=box]
	4310449712 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4310449872 [label="Edge(block, block.parent.children[self_index + 1])" shape=box]
	4310450032 [label="def IF_flow(block):" shape=box]
	4310564944 [label="Edge(block, block.children[0], \"yes\")" shape=box]
	4310565104 [label="if block.parent is not None:" shape=diamond]
	4310565264 [label="self_index = block.parent.children.index(block)" shape=box]
	4310565424 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4310565584 [label="for i, child in enumerate(block.parent.children[self_index + 1:]):" shape=diamond]
	4310565744 [label="keyword = child.keyword" shape=box]
	4310565904 [label="if i == 0:" shape=diamond]
	4310566064 [label="Edge(block, child, \"no\")" shape=box]
	4310566224 [label="if keyword != \"elif\" and keyword != \"else\":" shape=diamond]
	4310566384 [label="Edge(block.get_end_leaf(), child)" shape=box]
	4310566544 [label=break shape=box]
	4310566704 [label="def ELSE_flow(block):" shape=box]
	4310566864 [label="if len(block.children) != 0:" shape=diamond]
	4310567024 [label="Edge(block, block.children[0])" shape=box]
	4310567184 [label="for edge in block.edges:" shape=diamond]
	4310567344 [label="if edge.direction(block):" shape=diamond]
	4310567504 [label="else_target = edge.target_block" shape=box]
	4310567664 [label=break shape=box]
	4310567824 [label="for edge in block.edges:" shape=diamond]
	4310567984 [label="if not edge.direction(block):" shape=diamond]
	4310568144 [label="Edge(edge.source_block, else_target, label = edge.label)" shape=box]
	4310568304 [label="block.hide()" shape=box]
	4310568464 [label="if block.parent is not None:" shape=diamond]
	4310568624 [label="self_index = block.parent.children.index(block)" shape=box]
	4310568784 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4310568944 [label="Edge(block.get_end_leaf(), block.parent.children[self_index + 1])" shape=box]
	4310569104 [label="Keyword_Map = {\n\"if\": [\"diamond\", IF_flow],\n\"elif\": [\"diamond\", IF_flow],\n\"else\": [\"diamond\", ELSE_flow],\n\"for\": [\"diamond\", generic_flow],\n\"while\": [\"diamond\", generic_flow],\n\"try\": [\"diamond\", generic_flow],\n\"except\": [\"diamond\", generic_flow],\n\"finally\": [\"diamond\", generic_flow],\n\"with\": [\"diamond\", generic_flow],\n\"def\": [\"box\", generic_flow],\n\"class\": [\"box\", generic_flow]\n}\n" shape=box]
	4310569264 [label="class Edge:" shape=box]
	4310569424 [label="def __init__(self, source_block, target_block, label=\"\"):" shape=box]
	4310569584 [label="self.source_block = source_block" shape=box]
	4310569744 [label="self.target_block = target_block" shape=box]
	4310569904 [label="self.label=\"\"" shape=box]
	4310570064 [label="self.drawn = False" shape=box]
	4310570224 [label="source_block.edges.append(self)" shape=box]
	4310570384 [label="target_block.edges.append(self)" shape=box]
	4310570544 [label="def direction(self, block):" shape=box]
	4310570704 [label="if block == self.source_block:" shape=diamond]
	4310570864 [label="return True" shape=box]
	4310571024 [label="return False" shape=box]
	4310571184 [label="def hide(self):" shape=box]
	4310571344 [label="self.drawn = True" shape=box]
	4310571504 [label="def draw(self, dot: graphviz.Digraph):" shape=box]
	4310571664 [label="if self.drawn:" shape=diamond]
	4310571824 [label=return shape=box]
	4310571984 [label="self.drawn = True" shape=box]
	4310572144 [label="dot.edge(str(id(self.source_block)), str(id(self.target_block)), label=self.label)" shape=box]
	4310572304 [label="class Block:" shape=box]
	4310572464 [label="def __init__(self, content, parent = None):" shape=box]
	4310572624 [label="self.parent = parent" shape=box]
	4310572784 [label="self.content = []" shape=box]
	4310572944 [label="self.graph_func = None" shape=box]
	4310573104 [label="self.node = None" shape=box]
	4310573264 [label="self.first_line = None" shape=box]
	4310573424 [label="self.keyword = None" shape=box]
	4310573584 [label="self.shape = None" shape=box]
	4310573744 [label="self.edges = [] #[source object, target object, label]" shape=box]
	4310573904 [label="if parent is not None:" shape=diamond]
	4310574064 [label="self.first_line = repr(content[0][1])[1:-1]" shape=box]
	4310574224 [label="for line in content[1:]:" shape=diamond]
	4310574384 [label="if line[0] == 0:" shape=diamond]
	4310574544 [label=break shape=box]
	4310574704 [label="self.content.append([line[0] - 1, line[1]])" shape=box]
	4310574864 [label="keyword = self.first_line.split()[0]" shape=box]
	4310575024 [label="if keyword[-1] == \":\":" shape=diamond]
	4310575184 [label="keyword = keyword[0:-1]" shape=box]
	4310575344 [label="if keyword in Keyword_Map:" shape=diamond]
	4310575504 [label="self.keyword = keyword" shape=box]
	4310575664 [label="self.shape = Keyword_Map[keyword][0]" shape=box]
	4310575824 [label="self.graph_func = Keyword_Map[keyword][1]" shape=box]
	4310576144 [label="self.shape = \"box\"" shape=box]
	4310576304 [label="self.graph_func = generic_flow" shape=box]
	4310576624 [label="self.content = content" shape=box]
	4310576784 [label="self.children = []" shape=box]
	4310576944 [label="if len(self.content) != 0:" shape=diamond]
	4310577104 [label="for i in range(len(self.content)):" shape=diamond]
	4310577264 [label="if self.content[i][0] == 0:" shape=diamond]
	4310577424 [label="self.children.append(Block(self.content[i:], parent = self))" shape=box]
	4310577584 [label="def hide(self):" shape=box]
	4310577744 [label="self.shape = None" shape=box]
	4310577904 [label="for edge in self.edges:" shape=diamond]
	4310578064 [label="edge.hide()" shape=box]
	4310578224 [label="def get_end_leaf(self):" shape=box]
	4310578384 [label="if len(self.children) == 0:" shape=diamond]
	4310578544 [label="return self" shape=box]
	4310578864 [label="return self.children[-1].get_end_leaf()" shape=box]
	4310579024 [label="def draw_flow(self):" shape=box]
	4310579184 [label="if self.graph_func is not None:" shape=diamond]
	4310579344 [label="self.graph_func(self)" shape=box]
	4310579504 [label="for child in self.children:" shape=diamond]
	4310579664 [label="child.draw_flow()" shape=box]
	4310579824 [label="def draw_node(self, dot: graphviz.Digraph):" shape=box]
	4310579984 [label="dot.node(str(id(self)), self.first_line, shape=self.shape)" shape=box]
	4310580144 [label="def draw_graph_nodes(self, dot: graphviz.Digraph):" shape=box]
	4310580304 [label="if self.parent is not None and self.shape is not None:" shape=diamond]
	4310580464 [label="self.draw_node(dot)" shape=box]
	4310580624 [label="for child in self.children:" shape=diamond]
	4310580784 [label="child.draw_graph_nodes(dot)" shape=box]
	4310580944 [label="def draw_graph_edges(self, dot: graphviz.Digraph):" shape=box]
	4310581104 [label="if self.parent is not None:" shape=diamond]
	4310630480 [label="for edge in self.edges:" shape=diamond]
	4310630640 [label="edge.draw(dot)" shape=box]
	4310630800 [label="for child in self.children:" shape=diamond]
	4310630960 [label="child.draw_graph_edges(dot)" shape=box]
	4310631120 [label="def draw_graph(self, dot: graphviz.Digraph):" shape=box]
	4310631280 [label="self.draw_graph_edges(dot)" shape=box]
	4310631440 [label="self.draw_graph_nodes(dot)" shape=box]
	4310631600 [label="def num_indentation(line, i):" shape=box]
	4310631760 [label="if line[0] == '\\t':" shape=diamond]
	4310631920 [label="count = 0" shape=box]
	4310632080 [label="for char in line:" shape=diamond]
	4310632240 [label="if char == '\\t':" shape=diamond]
	4310632400 [label="count += 1" shape=box]
	4310632720 [label=break shape=box]
	4310632880 [label="return count" shape=box]
	4310633200 [label="num_intdent = (len(line) - len(line.strip())) / 4" shape=box]
	4310633360 [label="if not num_intdent.is_integer():" shape=diamond]
	4310633520 [label="raise IndentationError(f\"Bro. {num_intdent * 4} spaces at line {i}? What is wrong with you?\")" shape=box]
	4310633680 [label="return int((len(line) - len(line.strip())) / 4)" shape=box]
	4310633840 [label="def remove_lines(lines):" shape=box]
	4310634000 [label="open_multiline = False" shape=box]
	4310634160 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4310634320 [label="lines[i] = lines[i].rstrip()" shape=box]
	4310634480 [label="line = lines[i]" shape=box]
	4310634640 [label="if (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == True:" shape=diamond]
	4310634800 [label="open_multiline = False" shape=box]
	4310635120 [label="lines.pop(i)" shape=box]
	4310635280 [label=continue shape=box]
	4310635440 [label="elif (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == False:" shape=diamond]
	4310635600 [label="open_multiline = True" shape=box]
	4310635920 [label="if open_multiline or len(line) == 0 or line.strip()[0] == '#':" shape=diamond]
	4310636080 [label="lines.pop(i)" shape=box]
	4310636240 [label=continue shape=box]
	4310636400 [label="lines[i] = [num_indentation(line, i + 1), line.strip()]" shape=box]
	4310636560 [label="def merge_lines(lines):" shape=box]
	4310636720 [label="open_parentheses = 0" shape=box]
	4310636880 [label="open_square = 0" shape=box]
	4310637040 [label="open_curly = 0" shape=box]
	4310637200 [label="last_state = False" shape=box]
	4310637360 [label="combined_lines = \"\"" shape=box]
	4310637520 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4310637680 [label="open_parentheses += lines[i][1].count(\")\") - lines[i][1].count(\"(\")" shape=box]
	4310637840 [label="open_square += lines[i][1].count(\"]\") - lines[i][1].count(\"[\")" shape=box]
	4310638000 [label="open_curly += lines[i][1].count(\"}\") - lines[i][1].count(\"{\")" shape=box]
	4310638160 [label="if open_parentheses + open_square + open_curly > 0:" shape=diamond]
	4310638320 [label="combined_lines = lines[i][1] + '\\n' + combined_lines" shape=box]
	4310638480 [label="lines.pop(i)" shape=box]
	4310638640 [label="last_state = True" shape=box]
	4310638960 [label="if last_state == True:" shape=diamond]
	4310639120 [label="lines[i][1] += '\\n' + combined_lines" shape=box]
	4310639280 [label="combined_lines = \"\"" shape=box]
	4310639440 [label="last_state = False" shape=box]
	4310639600 [label="def main(file_name = __file__):" shape=box]
	4310639760 [label="try:" shape=diamond]
	4310639920 [label="with open(file_name, \"r\") as f:" shape=diamond]
	4310640080 [label="lines = f.readlines()" shape=box]
	4310640240 [label="except Exception as e:" shape=diamond]
	4310640400 [label="print(e)" shape=box]
	4310640560 [label="remove_lines(lines)" shape=box]
	4310640720 [label="merge_lines(lines)" shape=box]
	4310640880 [label="dot = graphviz.Digraph()" shape=box]
	4310641040 [label="program_block = Block(lines)" shape=box]
	4310641200 [label="program_block.draw_flow()" shape=box]
	4310641360 [label="program_block.draw_graph(dot)" shape=box]
	4310641520 [label="dot.render('graph', view=True)" shape=box]
	4310641680 [label="if __name__ == \"__main__\":" shape=diamond]
	4310641840 [label="if len(sys.argv) > 1:" shape=diamond]
	4310642000 [label="main(sys.argv[1])" shape=box]
	4310642320 [label="main()" shape=box]
}
