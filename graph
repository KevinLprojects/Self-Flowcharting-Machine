digraph {
	4335357456 [label="import sys" shape=box]
	4335358416 [label="import graphviz" shape=box]
	4334616080 [label="def generic_flow(block):" shape=box]
	4336222288 [label="if len(block.children) != 0:" shape=diamond]
	4331433296 [label="print(\"unsupported indentation causing keyword: \", block.first_line)" shape=box]
	4331068128 [label="Edge(block, block.children[0])" shape=box]
	4331132496 [label="if block.parent is not None:" shape=diamond]
	4335323472 [label="self_index = block.parent.children.index(block)" shape=box]
	4335882304 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4335882544 [label="Edge(block, block.parent.children[self_index + 1])" shape=box]
	4336061136 [label="def IF_flow(block):" shape=box]
	4336060912 [label="Edge(block, block.children[0], \"yes\")" shape=box]
	4336112384 [label="if block.parent is not None:" shape=diamond]
	4335100816 [label="self_index = block.parent.children.index(block)" shape=box]
	4335100624 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4335395152 [label="for i, child in enumerate(block.parent.children[self_index + 1:]):" shape=diamond]
	4335394624 [label="keyword = child.keyword" shape=box]
	4336106096 [label="if i == 0:" shape=diamond]
	4336105936 [label="Edge(block, child, \"no\")" shape=box]
	4336106896 [label="if keyword != \"elif\" and keyword != \"else\":" shape=diamond]
	4336106256 [label="Edge(block.get_end_leaf(), child)" shape=box]
	4336106416 [label=break shape=box]
	4336106736 [label="def ELSE_flow(block):" shape=box]
	4336107056 [label="for edge in block.edges:" shape=diamond]
	4336107216 [label="Edge(edge.source_block, block.children[0], label = edge.label)" shape=box]
	4336107376 [label="block.hide()" shape=box]
	4336238672 [label="if block.parent is not None:" shape=diamond]
	4336238832 [label="self_index = block.parent.children.index(block)" shape=box]
	4336238992 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4336239152 [label="Edge(block.get_end_leaf(), block.parent.children[self_index + 1])" shape=box]
	4336239312 [label="Keyword_Map = {\n\"if\": [\"diamond\", IF_flow],\n\"elif\": [\"diamond\", IF_flow],\n\"else\": [\"diamond\", ELSE_flow],\n\"for\": [\"diamond\", generic_flow],\n\"while\": [\"diamond\", generic_flow],\n\"try\": [\"diamond\", generic_flow],\n\"except\": [\"diamond\", generic_flow],\n\"finally\": [\"diamond\", generic_flow],\n\"with\": [\"diamond\", generic_flow],\n\"def\": [\"box\", generic_flow],\n\"class\": [\"box\", generic_flow]\n}\n" shape=box]
	4336239472 [label="class Edge:" shape=box]
	4336239632 [label="def __init__(self, source_block, target_block, label=\"\"):" shape=box]
	4336239792 [label="self.source_block = source_block" shape=box]
	4336239952 [label="self.target_block = target_block" shape=box]
	4336240112 [label="self.label=\"\"" shape=box]
	4336240272 [label="self.drawn = False" shape=box]
	4336240432 [label="source_block.edges.append(self)" shape=box]
	4336240592 [label="target_block.edges.append(self)" shape=box]
	4336240752 [label="def direction(self, block):" shape=box]
	4336240912 [label="if block == self.source_block:" shape=diamond]
	4336241072 [label="return True" shape=box]
	4336241232 [label="return False" shape=box]
	4336241392 [label="def hide(self):" shape=box]
	4336241552 [label="self.drawn = True" shape=box]
	4336241712 [label="def draw(self, dot: graphviz.Digraph):" shape=box]
	4336241872 [label="if self.drawn:" shape=diamond]
	4336242032 [label=return shape=box]
	4336242192 [label="self.drawn = True" shape=box]
	4336242352 [label="dot.edge(str(id(self.source_block)), str(id(self.target_block)), label=self.label)" shape=box]
	4336242512 [label="class Block:" shape=box]
	4336242672 [label="def __init__(self, content, parent = None):" shape=box]
	4336242832 [label="self.parent = parent" shape=box]
	4336242992 [label="self.content = []" shape=box]
	4336243152 [label="self.graph_func = None" shape=box]
	4336243312 [label="self.node = None" shape=box]
	4336243472 [label="self.first_line = None" shape=box]
	4336243632 [label="self.keyword = None" shape=box]
	4336243792 [label="self.shape = None" shape=box]
	4336243952 [label="self.edges = []" shape=box]
	4336244112 [label="if parent is not None:" shape=diamond]
	4336244272 [label="self.first_line = repr(remove_comment(content[0][1]))[1:-1]" shape=box]
	4336244432 [label="for line in content[1:]:" shape=diamond]
	4336244592 [label="if line[0] == 0:" shape=diamond]
	4336244752 [label=break shape=box]
	4336244912 [label="self.content.append([line[0] - 1, line[1]])" shape=box]
	4336245072 [label="keyword = self.first_line.split()[0]" shape=box]
	4336245232 [label="if keyword[-1] == \":\":" shape=diamond]
	4336245392 [label="keyword = keyword[0:-1]" shape=box]
	4336245552 [label="if keyword in Keyword_Map:" shape=diamond]
	4336245712 [label="self.keyword = keyword" shape=box]
	4336245872 [label="self.shape = Keyword_Map[keyword][0]" shape=box]
	4336246032 [label="self.graph_func = Keyword_Map[keyword][1]" shape=box]
	4336246352 [label="self.shape = \"box\"" shape=box]
	4336246512 [label="self.graph_func = generic_flow" shape=box]
	4336246832 [label="self.content = content" shape=box]
	4336246992 [label="self.children = []" shape=box]
	4336247152 [label="if len(self.content) != 0:" shape=diamond]
	4336247312 [label="for i in range(len(self.content)):" shape=diamond]
	4336247472 [label="if self.content[i][0] == 0:" shape=diamond]
	4336247632 [label="self.children.append(Block(self.content[i:], parent = self))" shape=box]
	4336247792 [label="def hide(self):" shape=box]
	4336247952 [label="self.shape = None" shape=box]
	4336248112 [label="for edge in self.edges:" shape=diamond]
	4336248272 [label="edge.hide()" shape=box]
	4336248432 [label="def get_end_leaf(self):" shape=box]
	4336248592 [label="if len(self.children) == 0:" shape=diamond]
	4336248752 [label="return self" shape=box]
	4336249072 [label="return self.children[-1].get_end_leaf()" shape=box]
	4336249232 [label="def draw_flow(self):" shape=box]
	4336249392 [label="if self.graph_func is not None:" shape=diamond]
	4336249552 [label="self.graph_func(self)" shape=box]
	4336249712 [label="for child in self.children:" shape=diamond]
	4336249872 [label="child.draw_flow()" shape=box]
	4336250032 [label="def draw_node(self, dot: graphviz.Digraph):" shape=box]
	4336250192 [label="dot.node(str(id(self)), self.first_line, shape=self.shape)" shape=box]
	4336250352 [label="def draw_graph_nodes(self, dot: graphviz.Digraph):" shape=box]
	4336250512 [label="if self.parent is not None and self.shape is not None:" shape=diamond]
	4336250672 [label="self.draw_node(dot)" shape=box]
	4336250832 [label="for child in self.children:" shape=diamond]
	4336250992 [label="child.draw_graph_nodes(dot)" shape=box]
	4336251152 [label="def draw_graph_edges(self, dot: graphviz.Digraph):" shape=box]
	4336251312 [label="if self.parent is not None:" shape=diamond]
	4336251472 [label="for edge in self.edges:" shape=diamond]
	4336251632 [label="edge.draw(dot)" shape=box]
	4336251792 [label="for child in self.children:" shape=diamond]
	4336251952 [label="child.draw_graph_edges(dot)" shape=box]
	4336252112 [label="def draw_graph(self, dot: graphviz.Digraph):" shape=box]
	4336252272 [label="self.draw_graph_nodes(dot)" shape=box]
	4336252432 [label="self.draw_graph_edges(dot)" shape=box]
	4336252592 [label="def num_indentation(line, i):" shape=box]
	4336252752 [label="if line[0] == '\\t':" shape=diamond]
	4336252912 [label="count = 0" shape=box]
	4336253072 [label="for char in line:" shape=diamond]
	4336253232 [label="if char == '\\t':" shape=diamond]
	4336253392 [label="count += 1" shape=box]
	4336253712 [label=break shape=box]
	4336253872 [label="return count" shape=box]
	4336254192 [label="num_intdent = (len(line) - len(line.strip())) / 4" shape=box]
	4336254352 [label="if not num_intdent.is_integer():" shape=diamond]
	4336254512 [label="raise IndentationError(f\"Bro. {num_intdent * 4} spaces? What is wrong with you?\")" shape=box]
	4336254672 [label="return int((len(line) - len(line.strip())) / 4)" shape=box]
	4336254832 [label="def remove_lines(lines):" shape=box]
	4336304208 [label="open_multiline = False" shape=box]
	4336304368 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4336304528 [label="lines[i] = lines[i].rstrip()" shape=box]
	4336304688 [label="line = lines[i]" shape=box]
	4336304848 [label="if (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == True:" shape=diamond]
	4336305008 [label="open_multiline = False" shape=box]
	4336305328 [label="lines.pop(i)" shape=box]
	4336305488 [label=continue shape=box]
	4336305648 [label="elif (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == False:" shape=diamond]
	4336305808 [label="open_multiline = True" shape=box]
	4336306128 [label="if open_multiline or len(line) == 0 or line.strip()[0] == '" shape=diamond]
	4336306288 [label="lines.pop(i)" shape=box]
	4336306448 [label=continue shape=box]
	4336306608 [label="lines[i] = [num_indentation(line, i + 1), line.strip()]" shape=box]
	4336306768 [label="def remove_comment(line):" shape=box]
	4336306928 [label="index = line.find(\"" shape=box]
	4336307088 [label="if index != -1:" shape=diamond]
	4336307248 [label="return(line[0:index].strip())" shape=box]
	4336307408 [label="return line" shape=box]
	4336307568 [label="def merge_lines(lines):" shape=box]
	4336307728 [label="open_parentheses = 0" shape=box]
	4336307888 [label="open_square = 0" shape=box]
	4336308048 [label="open_curly = 0" shape=box]
	4336308208 [label="last_state = False" shape=box]
	4336308368 [label="combined_lines = \"\"" shape=box]
	4336308528 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4336308688 [label="open_parentheses += lines[i][1].count(\")\") - lines[i][1].count(\"(\")" shape=box]
	4336308848 [label="open_square += lines[i][1].count(\"]\") - lines[i][1].count(\"[\")" shape=box]
	4336309008 [label="open_curly += lines[i][1].count(\"}\") - lines[i][1].count(\"{\")" shape=box]
	4336309168 [label="if open_parentheses + open_square + open_curly > 0:" shape=diamond]
	4336309328 [label="combined_lines = lines[i][1] + '\\n' + combined_lines" shape=box]
	4336309488 [label="lines.pop(i)" shape=box]
	4336309648 [label="last_state = True" shape=box]
	4336309968 [label="if last_state == True:" shape=diamond]
	4336310128 [label="lines[i][1] += '\\n' + combined_lines" shape=box]
	4336310288 [label="combined_lines = \"\"" shape=box]
	4336310448 [label="last_state = False" shape=box]
	4336310608 [label="def main(file_name = __file__):" shape=box]
	4336310768 [label="try:" shape=diamond]
	4336310928 [label="with open(file_name, \"r\") as f:" shape=diamond]
	4336311088 [label="lines = f.readlines()" shape=box]
	4336311248 [label="except Exception as e:" shape=diamond]
	4336311408 [label="print(e)" shape=box]
	4336311568 [label="remove_lines(lines)" shape=box]
	4336311728 [label="merge_lines(lines)" shape=box]
	4336311888 [label="program_block = Block(lines)" shape=box]
	4336312048 [label="program_block.draw_flow()" shape=box]
	4336312208 [label="dot = graphviz.Digraph()" shape=box]
	4336312368 [label="program_block.draw_graph(dot)" shape=box]
	4336312528 [label="dot.render('graph', view=True)" shape=box]
	4336312688 [label="if __name__ == \"__main__\":" shape=diamond]
	4336312848 [label="if len(sys.argv) > 1:" shape=diamond]
	4336313008 [label="main(sys.argv[1])" shape=box]
	4336313328 [label="main()" shape=box]
	4335357456 -> 4335358416 [label=""]
	4335358416 -> 4334616080 [label=""]
	4334616080 -> 4336222288 [label=""]
	4336222288 -> 4331433296 [label=""]
	4336222288 -> 4331132496 [label=""]
	4331433296 -> 4331068128 [label=""]
	4331132496 -> 4335323472 [label=""]
	4335323472 -> 4335882304 [label=""]
	4335882304 -> 4335882544 [label=""]
	4336061136 -> 4336060912 [label=""]
	4336060912 -> 4336112384 [label=""]
	4336112384 -> 4335100816 [label=""]
	4335100816 -> 4335100624 [label=""]
	4335100624 -> 4335395152 [label=""]
	4335395152 -> 4335394624 [label=""]
	4335394624 -> 4336106096 [label=""]
	4336106096 -> 4336105936 [label=""]
	4336106096 -> 4336106896 [label=""]
	4336105936 -> 4336106896 [label=""]
	4336106896 -> 4336106256 [label=""]
	4336106256 -> 4336106416 [label=""]
	4336106736 -> 4336107056 [label=""]
	4336107056 -> 4336107216 [label=""]
	4336107376 -> 4336238672 [label=""]
	4336238672 -> 4336238832 [label=""]
	4336238832 -> 4336238992 [label=""]
	4336238992 -> 4336239152 [label=""]
	4336239312 -> 4336239472 [label=""]
	4336239472 -> 4336239632 [label=""]
	4336239632 -> 4336239792 [label=""]
	4336239792 -> 4336239952 [label=""]
	4336239952 -> 4336240112 [label=""]
	4336240112 -> 4336240272 [label=""]
	4336240272 -> 4336240432 [label=""]
	4336240432 -> 4336240592 [label=""]
	4336240752 -> 4336240912 [label=""]
	4336240912 -> 4336241072 [label=""]
	4336240912 -> 4336241232 [label=""]
	4336241072 -> 4336241232 [label=""]
	4336241392 -> 4336241552 [label=""]
	4336241712 -> 4336241872 [label=""]
	4336241872 -> 4336242032 [label=""]
	4336241872 -> 4336242192 [label=""]
	4336242032 -> 4336242192 [label=""]
	4336242192 -> 4336242352 [label=""]
	4336242512 -> 4336242672 [label=""]
	4336242672 -> 4336242832 [label=""]
	4336242832 -> 4336242992 [label=""]
	4336242992 -> 4336243152 [label=""]
	4336243152 -> 4336243312 [label=""]
	4336243312 -> 4336243472 [label=""]
	4336243472 -> 4336243632 [label=""]
	4336243632 -> 4336243792 [label=""]
	4336243792 -> 4336243952 [label=""]
	4336243952 -> 4336244112 [label=""]
	4336244112 -> 4336244272 [label=""]
	4336244112 -> 4336246832 [label=""]
	4336244272 -> 4336244432 [label=""]
	4336244432 -> 4336244592 [label=""]
	4336244592 -> 4336244752 [label=""]
	4336244592 -> 4336244912 [label=""]
	4336244752 -> 4336244912 [label=""]
	4336245072 -> 4336245232 [label=""]
	4336245232 -> 4336245392 [label=""]
	4336245232 -> 4336245552 [label=""]
	4336245392 -> 4336245552 [label=""]
	4336245552 -> 4336245712 [label=""]
	4336245552 -> 4336246352 [label=""]
	4336245712 -> 4336245872 [label=""]
	4336245872 -> 4336246032 [label=""]
	4336246352 -> 4336246512 [label=""]
	4336246512 -> 4336246992 [label=""]
	4336246832 -> 4336246992 [label=""]
	4336246992 -> 4336247152 [label=""]
	4336247152 -> 4336247312 [label=""]
	4336247312 -> 4336247472 [label=""]
	4336247472 -> 4336247632 [label=""]
	4336247792 -> 4336247952 [label=""]
	4336247952 -> 4336248112 [label=""]
	4336248112 -> 4336248272 [label=""]
	4336248432 -> 4336248592 [label=""]
	4336248592 -> 4336248752 [label=""]
	4336248592 -> 4336249072 [label=""]
	4336249232 -> 4336249392 [label=""]
	4336249392 -> 4336249552 [label=""]
	4336249392 -> 4336249712 [label=""]
	4336249552 -> 4336249712 [label=""]
	4336249712 -> 4336249872 [label=""]
	4336250032 -> 4336250192 [label=""]
	4336250352 -> 4336250512 [label=""]
	4336250512 -> 4336250672 [label=""]
	4336250512 -> 4336250832 [label=""]
	4336250672 -> 4336250832 [label=""]
	4336250832 -> 4336250992 [label=""]
	4336251152 -> 4336251312 [label=""]
	4336251312 -> 4336251472 [label=""]
	4336251312 -> 4336251792 [label=""]
	4336251472 -> 4336251632 [label=""]
	4336251632 -> 4336251792 [label=""]
	4336251792 -> 4336251952 [label=""]
	4336252112 -> 4336252272 [label=""]
	4336252272 -> 4336252432 [label=""]
	4336252592 -> 4336252752 [label=""]
	4336252752 -> 4336252912 [label=""]
	4336252752 -> 4336254192 [label=""]
	4336252912 -> 4336253072 [label=""]
	4336253072 -> 4336253232 [label=""]
	4336253232 -> 4336253392 [label=""]
	4336253232 -> 4336253712 [label=""]
	4336254192 -> 4336254352 [label=""]
	4336254352 -> 4336254512 [label=""]
	4336254352 -> 4336254672 [label=""]
	4336254512 -> 4336254672 [label=""]
	4336254832 -> 4336304208 [label=""]
	4336304208 -> 4336304368 [label=""]
	4336304368 -> 4336304528 [label=""]
	4336304528 -> 4336304688 [label=""]
	4336304688 -> 4336304848 [label=""]
	4336304848 -> 4336305008 [label=""]
	4336304848 -> 4336305648 [label=""]
	4336305008 -> 4336305328 [label=""]
	4336305328 -> 4336305488 [label=""]
	4336305488 -> 4336306128 [label=""]
	4336305648 -> 4336305808 [label=""]
	4336305648 -> 4336306128 [label=""]
	4336305808 -> 4336306128 [label=""]
	4336306128 -> 4336306288 [label=""]
	4336306128 -> 4336306608 [label=""]
	4336306288 -> 4336306448 [label=""]
	4336306448 -> 4336306608 [label=""]
	4336306768 -> 4336306928 [label=""]
	4336306928 -> 4336307088 [label=""]
	4336307088 -> 4336307248 [label=""]
	4336307088 -> 4336307408 [label=""]
	4336307248 -> 4336307408 [label=""]
	4336307568 -> 4336307728 [label=""]
	4336307728 -> 4336307888 [label=""]
	4336307888 -> 4336308048 [label=""]
	4336308048 -> 4336308208 [label=""]
	4336308208 -> 4336308368 [label=""]
	4336308368 -> 4336308528 [label=""]
	4336308528 -> 4336308688 [label=""]
	4336308688 -> 4336308848 [label=""]
	4336308848 -> 4336309008 [label=""]
	4336309008 -> 4336309168 [label=""]
	4336309168 -> 4336309328 [label=""]
	4336309168 -> 4336309968 [label=""]
	4336309328 -> 4336309488 [label=""]
	4336309488 -> 4336309648 [label=""]
	4336309968 -> 4336310128 [label=""]
	4336309968 -> 4336310448 [label=""]
	4336310128 -> 4336310288 [label=""]
	4336310288 -> 4336310448 [label=""]
	4336310608 -> 4336310768 [label=""]
	4336310768 -> 4336310928 [label=""]
	4336310928 -> 4336311088 [label=""]
	4336311248 -> 4336311408 [label=""]
	4336311568 -> 4336311728 [label=""]
	4336311728 -> 4336311888 [label=""]
	4336311888 -> 4336312048 [label=""]
	4336312048 -> 4336312208 [label=""]
	4336312208 -> 4336312368 [label=""]
	4336312368 -> 4336312528 [label=""]
	4336312688 -> 4336312848 [label=""]
	4336312848 -> 4336313008 [label=""]
	4336312848 -> 4336313328 [label=""]
}
