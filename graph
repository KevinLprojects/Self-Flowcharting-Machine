digraph {
	4314795536 -> 4314796496 [label=""]
	4314796496 -> 4314119392 [label=""]
	4314796496 -> 4314119696 [label=""]
	4314119392 -> 4314119696 [label=""]
	4314119696 -> 4310854704 [label=""]
	4310854704 -> 4310490096 [label=""]
	4310854704 -> 4314655168 [label=""]
	4310490096 -> 4314745168 [label=""]
	4314655168 -> 4310553936 [label=""]
	4314745168 -> 4315320624 [label=""]
	4315320624 -> 4315320384 [label=""]
	4315320624 -> 4315482608 [label=""]
	4315320384 -> 4314522320 [label=""]
	4315482608 -> 4315482832 [label=""]
	4315482608 -> 4315533456 [label=""]
	4315482832 -> 4314522320 [label=""]
	4315533456 -> 4314522128 [label=""]
	4314817024 -> 4314816672 [label=""]
	4314816672 -> 4315528112 [label=""]
	4315528112 -> 4315527152 [label=""]
	4315527152 -> 4315527312 [label=""]
	4315527152 -> 4315527472 [label=""]
	4315527472 -> 4315527632 [label=""]
	4315527632 -> 4315527952 [label=""]
	4315527952 -> 4315528272 [label=""]
	4315528272 -> 4315528432 [label=""]
	4315528592 -> 4315528752 [label=""]
	4315528752 -> 4315528912 [label=""]
	4315528912 -> 4315529072 [label=""]
	4315529072 -> 4315643984 [label=""]
	4315643984 -> 4315644144 [label=""]
	4315644144 -> 4315644304 [label=""]
	4315644304 -> 4315644464 [label=""]
	4315644464 -> 4315644624 [label=""]
	4315644464 -> 4315644784 [label=""]
	4315644624 -> 4315644784 [label=""]
	4315644784 -> 4315644944 [label=""]
	4315644944 -> 4315645104 [label=""]
	4315645264 -> 4315645424 [label=""]
	4315645584 -> 4315645744 [label=""]
	4315645744 -> 4315645904 [label=""]
	4315645904 -> 4315646064 [label=""]
	4315646064 -> 4315646224 [label=""]
	4315646224 -> 4315646384 [label=""]
	4315646384 -> 4315646544 [label=""]
	4315646544 -> 4315646704 [label=""]
	4315646704 -> 4315646864 [label=""]
	4315647024 -> 4315647184 [label=""]
	4315647184 -> 4315647344 [label=""]
	4315647504 -> 4315647664 [label=""]
	4315647664 -> 4315647824 [label=""]
	4315647664 -> 4315647984 [label=""]
	4315647824 -> 4315647984 [label=""]
	4315647984 -> 4315648144 [label=""]
	4315648304 -> 4315648464 [label=""]
	4315648464 -> 4315648624 [label=""]
	4315648624 -> 4315648784 [label=""]
	4315648784 -> 4315648944 [label=""]
	4315648944 -> 4315649104 [label=""]
	4315649104 -> 4315649264 [label=""]
	4315649264 -> 4315649424 [label=""]
	4315649424 -> 4315649584 [label=""]
	4315649584 -> 4315649744 [label=""]
	4315649744 -> 4315649904 [label=""]
	4315649904 -> 4315650064 [label=""]
	4315649904 -> 4315652464 [label=""]
	4315650064 -> 4315650224 [label=""]
	4315650224 -> 4315650384 [label=""]
	4315650384 -> 4315650544 [label=""]
	4315650384 -> 4315650704 [label=""]
	4315650544 -> 4315650704 [label=""]
	4315650864 -> 4315651024 [label=""]
	4315651024 -> 4315651184 [label=""]
	4315651024 -> 4315651344 [label=""]
	4315651184 -> 4315651344 [label=""]
	4315651344 -> 4315651504 [label=""]
	4315651344 -> 4315651984 [label=""]
	4315651504 -> 4315651664 [label=""]
	4315651664 -> 4315651824 [label=""]
	4315651984 -> 4315652144 [label=""]
	4315652144 -> 4315652304 [label=""]
	4315652304 -> 4315652784 [label=""]
	4315652464 -> 4315652624 [label=""]
	4315652784 -> 4315652944 [label=""]
	4315652944 -> 4315653104 [label=""]
	4315653104 -> 4315653264 [label=""]
	4315653264 -> 4315653424 [label=""]
	4315653584 -> 4315653744 [label=""]
	4315653744 -> 4315653904 [label=""]
	4315653744 -> 4315654064 [label=""]
	4315654064 -> 4315654224 [label=""]
	4315654384 -> 4315654544 [label=""]
	4315654544 -> 4315654704 [label=""]
	4315654544 -> 4315654864 [label=""]
	4315654704 -> 4315654864 [label=""]
	4315654864 -> 4315655024 [label=""]
	4315655184 -> 4315655344 [label=""]
	4315655504 -> 4315655664 [label=""]
	4315655664 -> 4315655824 [label=""]
	4315655664 -> 4315655984 [label=""]
	4315655824 -> 4315655984 [label=""]
	4315655984 -> 4315656144 [label=""]
	4315656304 -> 4315656464 [label=""]
	4315656464 -> 4315656624 [label=""]
	4315656464 -> 4315656944 [label=""]
	4315656624 -> 4315656784 [label=""]
	4315656784 -> 4315656944 [label=""]
	4315656944 -> 4315657104 [label=""]
	4315657264 -> 4315657424 [label=""]
	4315657424 -> 4315657584 [label=""]
	4315657744 -> 4315657904 [label=""]
	4315657904 -> 4315658064 [label=""]
	4315657904 -> 4315659184 [label=""]
	4315658064 -> 4315658224 [label=""]
	4315658224 -> 4315658384 [label=""]
	4315658384 -> 4315658544 [label=""]
	4315658384 -> 4315658704 [label=""]
	4315658704 -> 4315658864 [label=""]
	4315659184 -> 4315659344 [label=""]
	4315659344 -> 4315659504 [label=""]
	4315659504 -> 4315659664 [label=""]
	4315659504 -> 4315659824 [label=""]
	4315659664 -> 4315659824 [label=""]
	4315659984 -> 4315660144 [label=""]
	4315660144 -> 4315709520 [label=""]
	4315709520 -> 4315709680 [label=""]
	4315709680 -> 4315709840 [label=""]
	4315709840 -> 4315710000 [label=""]
	4315710000 -> 4315710160 [label=""]
	4315710000 -> 4315710800 [label=""]
	4315710160 -> 4315710480 [label=""]
	4315710480 -> 4315710640 [label=""]
	4315710640 -> 4315711280 [label=""]
	4315710800 -> 4315710960 [label=""]
	4315710800 -> 4315711280 [label=""]
	4315710960 -> 4315711280 [label=""]
	4315711280 -> 4315711440 [label=""]
	4315711280 -> 4315711760 [label=""]
	4315711440 -> 4315711600 [label=""]
	4315711600 -> 4315711760 [label=""]
	4315711920 -> 4315712080 [label=""]
	4315712080 -> 4315712240 [label=""]
	4315712240 -> 4315712400 [label=""]
	4315712400 -> 4315712560 [label=""]
	4315712560 -> 4315712720 [label=""]
	4315712720 -> 4315712880 [label=""]
	4315712880 -> 4315713040 [label=""]
	4315713040 -> 4315713200 [label=""]
	4315713200 -> 4315713360 [label=""]
	4315713360 -> 4315713520 [label=""]
	4315713520 -> 4315713680 [label=""]
	4315713520 -> 4315714160 [label=""]
	4315713680 -> 4315713840 [label=""]
	4315713840 -> 4315714000 [label=""]
	4315714160 -> 4315714320 [label=""]
	4315714320 -> 4315714480 [label=""]
	4315714320 -> 4315714800 [label=""]
	4315714480 -> 4315714640 [label=""]
	4315714640 -> 4315714800 [label=""]
	4315714960 -> 4315715120 [label=""]
	4315715120 -> 4315715280 [label=""]
	4315715280 -> 4315715440 [label=""]
	4315715600 -> 4315715760 [label=""]
	4315715920 -> 4315716080 [label=""]
	4315716080 -> 4315716240 [label=""]
	4315716240 -> 4315716400 [label=""]
	4315716400 -> 4315716560 [label=""]
	4315716560 -> 4315716720 [label=""]
	4315716720 -> 4315716880 [label=""]
	4315717040 -> 4315717200 [label=""]
	4315717200 -> 4315717360 [label=""]
	4315717200 -> 4315717520 [label=""]
	4315717520 -> 4315717680 [label=""]
	4314795536 [label="def if_test():" shape=box]
	4314796496 [label="if True:" shape=diamond]
	4314119392 [label="pass#1" shape=box]
	4314119696 [label="pass#2" shape=box]
	4310854704 [label="if True:" shape=diamond]
	4310490096 [label="pass#3" shape=box]
	4314655168 [label="else:" shape=diamond]
	4310553936 [label="pass#4" shape=box]
	4314745168 [label="pass#5" shape=box]
	4315320624 [label="if True:" shape=diamond]
	4315320384 [label="pass#6" shape=box]
	4315482608 [label="elif True:" shape=diamond]
	4315482832 [label="pass#7" shape=box]
	4315533456 [label="else:" shape=diamond]
	4314522128 [label="pass#8" shape=box]
	4314522320 [label="pass#9" shape=box]
	4314817024 [label="import sys" shape=box]
	4314816672 [label="import graphviz" shape=box]
	4315528112 [label="def generic_flow(block):" shape=box]
	4315527152 [label="if len(block.children) != 0:" shape=diamond]
	4315527312 [label="Edge(block, block.children[0])" shape=box]
	4315527472 [label="else:" shape=diamond]
	4315527632 [label="if block.parent is not None:" shape=diamond]
	4315527952 [label="self_index = block.parent.children.index(block)" shape=box]
	4315528272 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4315528432 [label="Edge(block, block.parent.children[self_index + 1])" shape=box]
	4315528592 [label="def IF_flow(block):" shape=box]
	4315528752 [label="Edge(block, block.children[0], \"yes\")" shape=box]
	4315528912 [label="if block.parent is not None:" shape=diamond]
	4315529072 [label="self_index = block.parent.children.index(block)" shape=box]
	4315643984 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	4315644144 [label="for i, child in enumerate(block.parent.children[self_index + 1:]):" shape=diamond]
	4315644304 [label="keyword = child.keyword" shape=box]
	4315644464 [label="if i == 0:" shape=diamond]
	4315644624 [label="Edge(block, child, \"no\")" shape=box]
	4315644784 [label="if keyword != \"elif\" and keyword != \"else\":" shape=diamond]
	4315644944 [label="Edge(block.get_end_leaf(), child)" shape=box]
	4315645104 [label=break shape=box]
	4315645264 [label="def ELSE_flow(block):" shape=box]
	4315645424 [label="generic_flow(block)" shape=box]
	4315645584 [label="Keyword_Map = {\n\"if\": [\"diamond\", IF_flow],\n\"elif\": [\"diamond\", IF_flow],\n\"else\": [\"diamond\", ELSE_flow],\n\"for\": [\"diamond\", generic_flow],\n\"while\": [\"diamond\", generic_flow],\n\"try\": [\"diamond\", generic_flow],\n\"except\": [\"diamond\", generic_flow],\n\"finally\": [\"diamond\", generic_flow],\n\"with\": [\"diamond\", generic_flow],\n\"def\": [\"box\", generic_flow],\n\"class\": [\"box\", generic_flow]\n}\n" shape=box]
	4315645744 [label="class Edge:" shape=box]
	4315645904 [label="def __init__(self, source_block, target_block, label=\"\"):" shape=box]
	4315646064 [label="self.source_block = source_block" shape=box]
	4315646224 [label="self.target_block = target_block" shape=box]
	4315646384 [label="self.label=\"\"" shape=box]
	4315646544 [label="self.drawn = False" shape=box]
	4315646704 [label="source_block.edges.append(self)" shape=box]
	4315646864 [label="target_block.edges.append(self)" shape=box]
	4315647024 [label="def remove(self):" shape=box]
	4315647184 [label="self.source_block.edges.remove(self)" shape=box]
	4315647344 [label="self.target_block.edges.remove(self)" shape=box]
	4315647504 [label="def draw(self, dot: graphviz.Digraph):" shape=box]
	4315647664 [label="if self.drawn:" shape=diamond]
	4315647824 [label=return shape=box]
	4315647984 [label="self.drawn = True" shape=box]
	4315648144 [label="dot.edge(str(id(self.source_block)), str(id(self.target_block)), label=self.label)" shape=box]
	4315648304 [label="class Block:" shape=box]
	4315648464 [label="def __init__(self, content, parent = None):" shape=box]
	4315648624 [label="self.parent = parent" shape=box]
	4315648784 [label="self.content = []" shape=box]
	4315648944 [label="self.graph_func = None" shape=box]
	4315649104 [label="self.node = None" shape=box]
	4315649264 [label="self.first_line = None" shape=box]
	4315649424 [label="self.keyword = None" shape=box]
	4315649584 [label="self.shape = None" shape=box]
	4315649744 [label="self.edges = [] #[source object, target object, label]" shape=box]
	4315649904 [label="if parent is not None:" shape=diamond]
	4315650064 [label="self.first_line = repr(content[0][1])[1:-1]" shape=box]
	4315650224 [label="for line in content[1:]:" shape=diamond]
	4315650384 [label="if line[0] == 0:" shape=diamond]
	4315650544 [label=break shape=box]
	4315650704 [label="self.content.append([line[0] - 1, line[1]])" shape=box]
	4315650864 [label="keyword = self.first_line.split()[0]" shape=box]
	4315651024 [label="if keyword[-1] == \":\":" shape=diamond]
	4315651184 [label="keyword = keyword[0:-1]" shape=box]
	4315651344 [label="if keyword in Keyword_Map:" shape=diamond]
	4315651504 [label="self.keyword = keyword" shape=box]
	4315651664 [label="self.shape = Keyword_Map[keyword][0]" shape=box]
	4315651824 [label="self.graph_func = Keyword_Map[keyword][1]" shape=box]
	4315651984 [label="else:" shape=diamond]
	4315652144 [label="self.shape = \"box\"" shape=box]
	4315652304 [label="self.graph_func = generic_flow" shape=box]
	4315652464 [label="else:" shape=diamond]
	4315652624 [label="self.content = content" shape=box]
	4315652784 [label="self.children = []" shape=box]
	4315652944 [label="if len(self.content) != 0:" shape=diamond]
	4315653104 [label="for i in range(len(self.content)):" shape=diamond]
	4315653264 [label="if self.content[i][0] == 0:" shape=diamond]
	4315653424 [label="self.children.append(Block(self.content[i:], parent = self))" shape=box]
	4315653584 [label="def get_end_leaf(self):" shape=box]
	4315653744 [label="if len(self.children) == 0:" shape=diamond]
	4315653904 [label="return self" shape=box]
	4315654064 [label="else:" shape=diamond]
	4315654224 [label="return self.children[-1].get_end_leaf()" shape=box]
	4315654384 [label="def draw_flow(self):" shape=box]
	4315654544 [label="if self.graph_func is not None:" shape=diamond]
	4315654704 [label="self.graph_func(self)" shape=box]
	4315654864 [label="for child in self.children:" shape=diamond]
	4315655024 [label="child.draw_flow()" shape=box]
	4315655184 [label="def draw_node(self, dot: graphviz.Digraph):" shape=box]
	4315655344 [label="dot.node(str(id(self)), self.first_line, shape=self.shape)" shape=box]
	4315655504 [label="def draw_graph_nodes(self, dot: graphviz.Digraph):" shape=box]
	4315655664 [label="if self.parent is not None and self.shape is not None:" shape=diamond]
	4315655824 [label="self.draw_node(dot)" shape=box]
	4315655984 [label="for child in self.children:" shape=diamond]
	4315656144 [label="child.draw_graph_nodes(dot)" shape=box]
	4315656304 [label="def draw_graph_edges(self, dot: graphviz.Digraph):" shape=box]
	4315656464 [label="if self.parent is not None:" shape=diamond]
	4315656624 [label="for edge in self.edges:" shape=diamond]
	4315656784 [label="edge.draw(dot)" shape=box]
	4315656944 [label="for child in self.children:" shape=diamond]
	4315657104 [label="child.draw_graph_edges(dot)" shape=box]
	4315657264 [label="def draw_graph(self, dot: graphviz.Digraph):" shape=box]
	4315657424 [label="self.draw_graph_edges(dot)" shape=box]
	4315657584 [label="self.draw_graph_nodes(dot)" shape=box]
	4315657744 [label="def num_indentation(line, i):" shape=box]
	4315657904 [label="if line[0] == '\\t':" shape=diamond]
	4315658064 [label="count = 0" shape=box]
	4315658224 [label="for char in line:" shape=diamond]
	4315658384 [label="if char == '\\t':" shape=diamond]
	4315658544 [label="count += 1" shape=box]
	4315658704 [label="else:" shape=diamond]
	4315658864 [label=break shape=box]
	4315659024 [label="return count" shape=box]
	4315659184 [label="else:" shape=diamond]
	4315659344 [label="num_intdent = (len(line) - len(line.strip())) / 4" shape=box]
	4315659504 [label="if not num_intdent.is_integer():" shape=diamond]
	4315659664 [label="raise IndentationError(f\"Bro. {num_intdent * 4} spaces at line {i}? What is wrong with you?\")" shape=box]
	4315659824 [label="return int((len(line) - len(line.strip())) / 4)" shape=box]
	4315659984 [label="def remove_lines(lines):" shape=box]
	4315660144 [label="open_multiline = False" shape=box]
	4315709520 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4315709680 [label="lines[i] = lines[i].rstrip()" shape=box]
	4315709840 [label="line = lines[i]" shape=box]
	4315710000 [label="if (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == True:" shape=diamond]
	4315710160 [label="open_multiline = False" shape=box]
	4315710480 [label="lines.pop(i)" shape=box]
	4315710640 [label=continue shape=box]
	4315710800 [label="elif (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == False:" shape=diamond]
	4315710960 [label="open_multiline = True" shape=box]
	4315711280 [label="if open_multiline or len(line) == 0 or line.strip()[0] == '#':" shape=diamond]
	4315711440 [label="lines.pop(i)" shape=box]
	4315711600 [label=continue shape=box]
	4315711760 [label="lines[i] = [num_indentation(line, i + 1), line.strip()]" shape=box]
	4315711920 [label="def merge_lines(lines):" shape=box]
	4315712080 [label="open_parentheses = 0" shape=box]
	4315712240 [label="open_square = 0" shape=box]
	4315712400 [label="open_curly = 0" shape=box]
	4315712560 [label="last_state = False" shape=box]
	4315712720 [label="combined_lines = \"\"" shape=box]
	4315712880 [label="for i in reversed(range(len(lines))):" shape=diamond]
	4315713040 [label="open_parentheses += lines[i][1].count(\")\") - lines[i][1].count(\"(\")" shape=box]
	4315713200 [label="open_square += lines[i][1].count(\"]\") - lines[i][1].count(\"[\")" shape=box]
	4315713360 [label="open_curly += lines[i][1].count(\"}\") - lines[i][1].count(\"{\")" shape=box]
	4315713520 [label="if open_parentheses + open_square + open_curly > 0:" shape=diamond]
	4315713680 [label="combined_lines = lines[i][1] + '\\n' + combined_lines" shape=box]
	4315713840 [label="lines.pop(i)" shape=box]
	4315714000 [label="last_state = True" shape=box]
	4315714160 [label="else:" shape=diamond]
	4315714320 [label="if last_state == True:" shape=diamond]
	4315714480 [label="lines[i][1] += '\\n' + combined_lines" shape=box]
	4315714640 [label="combined_lines = \"\"" shape=box]
	4315714800 [label="last_state = False" shape=box]
	4315714960 [label="def main(file_name = __file__):" shape=box]
	4315715120 [label="try:" shape=diamond]
	4315715280 [label="with open(file_name, \"r\") as f:" shape=diamond]
	4315715440 [label="lines = f.readlines()" shape=box]
	4315715600 [label="except Exception as e:" shape=diamond]
	4315715760 [label="print(e)" shape=box]
	4315715920 [label="remove_lines(lines)" shape=box]
	4315716080 [label="merge_lines(lines)" shape=box]
	4315716240 [label="dot = graphviz.Digraph()" shape=box]
	4315716400 [label="program_block = Block(lines)" shape=box]
	4315716560 [label="program_block.draw_flow()" shape=box]
	4315716720 [label="program_block.draw_graph(dot)" shape=box]
	4315716880 [label="dot.render('graph', view=True)" shape=box]
	4315717040 [label="if __name__ == \"__main__\":" shape=diamond]
	4315717200 [label="if len(sys.argv) > 1:" shape=diamond]
	4315717360 [label="main(sys.argv[1])" shape=box]
	4315717520 [label="else:" shape=diamond]
	4315717680 [label="main()" shape=box]
}
