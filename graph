digraph {
	2871341908720 [label="import sys" shape=box]
	2871341403024 [label="import graphviz" shape=box]
	2871341403664 [label="def generic(Block):" shape=box]
	2871302535808 [label="if len(Block.children) != 0:" shape=diamond]
	2871302536112 [label="Block.dot.edge(str(id(Block)), str(id(Block.children[0])))" shape=box]
	2871297537904 [label="else:" shape=box]
	2871300049920 [label="if Block.parent is not None:" shape=diamond]
	2871341343312 [label="self_index = Block.parent.children.index(Block)" shape=box]
	2871299927888 [label="if self_index != len(Block.parent.children) - 1:" shape=diamond]
	2871341369168 [label="Block.dot.edge(str(id(Block)), str(id(Block.parent.children[self_index + 1])))" shape=box]
	2871341573824 [label="Keyword_Map = {
\"if\": [\"diamond\", generic],
\"elif\": [\"diamond\", generic],
\"else\": [\"diamond\", generic],
\"for\": [\"diamond\", generic],
\"while\": [\"diamond\", generic],
\"try\": [\"diamond\", generic],
\"except\": [\"diamond\", generic],
\"finally\": [\"diamond\", generic],
\"with\": [\"diamond\", generic],
\"def\": [\"box\", generic],
\"class\": [\"box\", generic]
}
" shape=box]
	2871341573584 [label="class Block:" shape=box]
	2871341558800 [label="def __init__(self, content, dot, parent = None):" shape=box]
	2871341559024 [label="self.parent = parent" shape=box]
	2871298074032 [label="self.content = []" shape=box]
	2871302419472 [label="self.dot = dot" shape=box]
	2871302419664 [label="for line in content[1:]:" shape=diamond]
	2871341782784 [label="if line[0] == 0:" shape=diamond]
	2871341783312 [label=break shape=box]
	2871342246928 [label="self.content.append([line[0] - 1, line[1]])" shape=box]
	2871342247088 [label="self.keyword = None" shape=box]
	2871341506656 [label="self.graph_func = None" shape=box]
	2871342357840 [label="self.node = None" shape=box]
	2871342357328 [label="first_line = content[0][1]" shape=box]
	2871342200528 [label="keyword = first_line.split()[0]" shape=box]
	2871342353744 [label="if keyword in Keyword_Map:" shape=diamond]
	2871342358864 [label="self.keyword = keyword" shape=box]
	2871342358352 [label="self.node = self.dot.node(str(id(self)), first_line, shape = Keyword_Map[keyword][0])" shape=box]
	2871342358992 [label="self.graph_func = Keyword_Map[keyword][1]" shape=box]
	2871342358736 [label="else:" shape=box]
	2871342359504 [label="self.node = self.dot.node(str(id(self)), first_line, shape = \"box\")" shape=box]
	2871342359120 [label="self.graph_func = generic" shape=box]
	2871342359376 [label="self.children = []" shape=box]
	2871342359248 [label="if len(self.content) != 0:" shape=diamond]
	2871342360016 [label="for i in range(len(self.content)):" shape=diamond]
	2871342360400 [label="if self.content[i][0] == 0:" shape=diamond]
	2871342360528 [label="self.children.append(Block(self.content[i:], self.dot, parent = self))" shape=box]
	2871342200144 [label="def graph(self):" shape=box]
	2871342361168 [label="self.graph_func(self)" shape=box]
	2871342359760 [label="for child in self.children:" shape=diamond]
	2871342360272 [label="child.graph()" shape=box]
	2871342360656 [label="def num_indentation(line, i):" shape=box]
	2871342360912 [label="if line[0] == '\t':" shape=diamond]
	2871342361040 [label="count = 0" shape=box]
	2871342361552 [label="for char in line:" shape=diamond]
	2871342361808 [label="if char == '\t':" shape=diamond]
	2871342361680 [label="count += 1" shape=box]
	2871342359632 [label="else:" shape=box]
	2871342362448 [label=break shape=box]
	2871342361424 [label="return count" shape=box]
	2871342360144 [label="else:" shape=box]
	2871342361936 [label="num_intdent = (len(line) - len(line.strip())) / 4" shape=box]
	2871342362576 [label="if not num_intdent.is_integer():" shape=diamond]
	2871342362320 [label="raise IndentationError(f\"Bro. {num_intdent * 4} spaces at line {i}? What is wrong with you?\")" shape=box]
	2871342362192 [label="return int((len(line) - len(line.strip())) / 4)" shape=box]
	2871342362064 [label="def remove_lines(lines):" shape=box]
	2871342362704 [label="open_multiline = False" shape=box]
	2871342363472 [label="for i in reversed(range(len(lines))):" shape=diamond]
	2871342363856 [label="lines[i] = lines[i].rstrip()" shape=box]
	2871342363600 [label="line = lines[i]" shape=box]
	2871342362960 [label="if (line.strip().startswith(\"\"\"\"\") or line.strip().startswith(\"\'\'\'\")) and open_multiline == True:" shape=diamond]
	2871342364112 [label="open_multiline = False" shape=box]
	2871342364368 [label="lines.pop(i)" shape=box]
	2871342364752 [label="print(\"comment ended\")" shape=box]
	2871342364496 [label=continue shape=box]
	2871342363984 [label="elif (line.strip().startswith(\"\"\"\"\") or line.strip().startswith(\"\'\'\'\")) and open_multiline == False:" shape=diamond]
	2871342365136 [label="open_multiline = True" shape=box]
	2871342364880 [label="print(\"comment start\")" shape=box]
	2871342364624 [label="if open_multiline or len(line) == 0 or line.strip()[0] == '#':" shape=diamond]
	2871342365264 [label="lines.pop(i)" shape=box]
	2871342365392 [label="print(\"in comment\")" shape=box]
	2871342366032 [label=continue shape=box]
	2871342365008 [label="print('\n')" shape=box]
	2871342365776 [label="lines[i] = [num_indentation(line, i + 1), line.strip()]" shape=box]
	2871342362832 [label="def merge_lines(lines):" shape=box]
	2871342365904 [label="open_parentheses = 0" shape=box]
	2871342365648 [label="open_square = 0" shape=box]
	2871342365520 [label="open_curly = 0" shape=box]
	2871342366160 [label="last_state = False" shape=box]
	2871342366288 [label="combined_lines = \"\"" shape=box]
	2871342366416 [label="for i in reversed(range(len(lines))):" shape=diamond]
	2871342399696 [label="open_parentheses += lines[i][1].count(\")\") - lines[i][1].count(\"(\")" shape=box]
	2871342399952 [label="open_square += lines[i][1].count(\"]\") - lines[i][1].count(\"[\")" shape=box]
	2871342399824 [label="open_curly += lines[i][1].count(\"}\") - lines[i][1].count(\"{\")" shape=box]
	2871342400080 [label="if open_parentheses + open_square + open_curly > 0:" shape=diamond]
	2871342400720 [label="combined_lines = lines[i][1] + '\n' + combined_lines" shape=box]
	2871342400208 [label="lines.pop(i)" shape=box]
	2871342401232 [label="last_state = True" shape=box]
	2871342400464 [label="else:" shape=box]
	2871342401104 [label="if last_state == True:" shape=diamond]
	2871342401360 [label="lines[i][1] += '\n' + combined_lines" shape=box]
	2871342401488 [label="combined_lines = \"\"" shape=box]
	2871342400976 [label="last_state = False" shape=box]
	2871342366544 [label="def main(file_name = __file__):" shape=box]
	2871342401872 [label="try:" shape=box]
	2871342402256 [label="with open(file_name, \"r\") as f:" shape=diamond]
	2871342402384 [label="lines = f.readlines()" shape=box]
	2871342400848 [label="except Exception as e:" shape=diamond]
	2871342403024 [label="print(e)" shape=box]
	2871342402512 [label="remove_lines(lines)" shape=box]
	2871342403152 [label="merge_lines(lines)" shape=box]
	2871342401744 [label="dot = graphviz.Digraph()" shape=box]
	2871342402640 [label="blocks = []" shape=box]
	2871342401616 [label="for i in range(len(lines)):" shape=diamond]
	2871342403280 [label="if lines[i][0] == 0:" shape=diamond]
	2871342403408 [label="blocks.append(Block(lines[i:], dot))" shape=box]
	2871342402768 [label="for block in blocks:" shape=diamond]
	2871342404048 [label="block.graph()" shape=box]
	2871342403664 [label="dot.render('graph', view=True)" shape=box]
	2871342404432 [label="if __name__ == \"__main__\":" shape=diamond]
	2871342402000 [label="if len(sys.argv) > 1:" shape=diamond]
	2871342404816 [label="main(sys.argv[1])" shape=box]
	2871342404688 [label="else:" shape=box]
	2871342405072 [label="main()" shape=box]
	2871341403664 -> 2871302535808
	2871302535808 -> 2871302536112
	2871297537904 -> 2871300049920
	2871300049920 -> 2871341343312
	2871341343312 -> 2871299927888
	2871299927888 -> 2871341369168
	2871341573584 -> 2871341558800
	2871341558800 -> 2871341559024
	2871341559024 -> 2871298074032
	2871298074032 -> 2871302419472
	2871302419472 -> 2871302419664
	2871302419664 -> 2871341782784
	2871341782784 -> 2871341783312
	2871342247088 -> 2871341506656
	2871341506656 -> 2871342357840
	2871342357840 -> 2871342357328
	2871342357328 -> 2871342200528
	2871342200528 -> 2871342353744
	2871342353744 -> 2871342358864
	2871342358864 -> 2871342358352
	2871342358352 -> 2871342358992
	2871342358736 -> 2871342359504
	2871342359504 -> 2871342359120
	2871342359376 -> 2871342359248
	2871342359248 -> 2871342360016
	2871342360016 -> 2871342360400
	2871342360400 -> 2871342360528
	2871342200144 -> 2871342361168
	2871342361168 -> 2871342359760
	2871342359760 -> 2871342360272
	2871342360656 -> 2871342360912
	2871342360912 -> 2871342361040
	2871342361040 -> 2871342361552
	2871342361552 -> 2871342361808
	2871342361808 -> 2871342361680
	2871342359632 -> 2871342362448
	2871342360144 -> 2871342361936
	2871342361936 -> 2871342362576
	2871342362576 -> 2871342362320
	2871342362064 -> 2871342362704
	2871342362704 -> 2871342363472
	2871342363472 -> 2871342363856
	2871342363856 -> 2871342363600
	2871342363600 -> 2871342362960
	2871342362960 -> 2871342364112
	2871342364112 -> 2871342364368
	2871342364368 -> 2871342364752
	2871342364752 -> 2871342364496
	2871342363984 -> 2871342365136
	2871342365136 -> 2871342364880
	2871342364624 -> 2871342365264
	2871342365264 -> 2871342365392
	2871342365392 -> 2871342366032
	2871342365008 -> 2871342365776
	2871342362832 -> 2871342365904
	2871342365904 -> 2871342365648
	2871342365648 -> 2871342365520
	2871342365520 -> 2871342366160
	2871342366160 -> 2871342366288
	2871342366288 -> 2871342366416
	2871342366416 -> 2871342399696
	2871342399696 -> 2871342399952
	2871342399952 -> 2871342399824
	2871342399824 -> 2871342400080
	2871342400080 -> 2871342400720
	2871342400720 -> 2871342400208
	2871342400208 -> 2871342401232
	2871342400464 -> 2871342401104
	2871342401104 -> 2871342401360
	2871342401360 -> 2871342401488
	2871342366544 -> 2871342401872
	2871342401872 -> 2871342402256
	2871342402256 -> 2871342402384
	2871342400848 -> 2871342403024
	2871342402512 -> 2871342403152
	2871342403152 -> 2871342401744
	2871342401744 -> 2871342402640
	2871342402640 -> 2871342401616
	2871342401616 -> 2871342403280
	2871342403280 -> 2871342403408
	2871342402768 -> 2871342404048
	2871342404432 -> 2871342402000
	2871342402000 -> 2871342404816
	2871342404688 -> 2871342405072
}
