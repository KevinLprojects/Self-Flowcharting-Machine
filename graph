digraph {
	2394542818032 [label="def test():" shape=box]
	2394542230736 [label="if True:" shape=diamond]
	2394542231376 [label="pass#1" shape=box]
	2394541505152 [label="pass#2" shape=box]
	2394541505456 [label="if True:" shape=diamond]
	2394536507248 [label="pass#3" shape=box]
	2394539019264 [label="else:" shape=diamond]
	2394542269008 [label="pass#4" shape=box]
	2394538897488 [label="pass#5" shape=box]
	2394542295120 [label="if True:" shape=diamond]
	2394542482896 [label="pass#6" shape=box]
	2394542482656 [label="elif True:" shape=diamond]
	2394542451952 [label="pass#7" shape=box]
	2394542452176 [label="else:" shape=diamond]
	2394543473552 [label="pass#8" shape=box]
	2394541405200 [label="pass#9" shape=box]
	2394541405392 [label="import sys" shape=box]
	2394542676240 [label="import graphviz" shape=box]
	2394542675888 [label="def generic(block):" shape=box]
	2394543434768 [label="if len(block.children) != 0:" shape=diamond]
	2394543434928 [label="block.dot.edge(str(id(block)), str(id(block.children[0])))" shape=box]
	2394542399152 [label="else:" shape=diamond]
	2394542399296 [label="if block.parent is not None:" shape=diamond]
	2394542399440 [label="self_index = block.parent.children.index(block)" shape=box]
	2394542399584 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	2394542400016 [label="block.dot.edge(str(id(block)), str(id(block.parent.children[self_index + 1])))" shape=box]
	2394542400736 [label="def IF(block):" shape=box]
	2394542400592 [label="block.dot.edge(str(id(block)), str(id(block.children[0])), label=\"yes\")" shape=box]
	2394542401024 [label="if block.parent is not None:" shape=diamond]
	2394542400880 [label="self_index = block.parent.children.index(block)" shape=box]
	2394542401168 [label="if self_index != len(block.parent.children) - 1:" shape=diamond]
	2394542401456 [label="for i, child in enumerate(block.parent.children[self_index + 1:]):" shape=diamond]
	2394542401744 [label="keyword = child.keyword" shape=box]
	2394542401600 [label="if i == 0:" shape=diamond]
	2394542401888 [label="block.dot.edge(str(id(block)), str(id(child)), label=\"no\")" shape=box]
	2394542402176 [label="if keyword != \"elif\" and keyword != \"else\":" shape=diamond]
	2394542402320 [label="block.dot.edge(str(id(block.get_end_leaf())), str(id(child)))" shape=box]
	2394542402608 [label=break shape=box]
	2394542402752 [label="Keyword_Map = {\n\"if\": [\"diamond\", IF],\n\"elif\": [\"diamond\", IF],\n\"else\": [\"diamond\", generic],\n\"for\": [\"diamond\", generic],\n\"while\": [\"diamond\", generic],\n\"try\": [\"diamond\", generic],\n\"except\": [\"diamond\", generic],\n\"finally\": [\"diamond\", generic],\n\"with\": [\"diamond\", generic],\n\"def\": [\"box\", generic],\n\"class\": [\"box\", generic]\n}\n" shape=box]
	2394542402896 [label="class Block:" shape=box]
	2394542403040 [label="def __init__(self, content, dot, parent = None):" shape=box]
	2394542403184 [label="self.parent = parent" shape=box]
	2394542403328 [label="self.content = []" shape=box]
	2394542403472 [label="self.dot = dot" shape=box]
	2394542403616 [label="for line in content[1:]:" shape=diamond]
	2394542403760 [label="if line[0] == 0:" shape=diamond]
	2394542403904 [label=break shape=box]
	2394542404048 [label="self.content.append([line[0] - 1, line[1]])" shape=box]
	2394542404192 [label="self.keyword = None" shape=box]
	2394542404480 [label="self.graph_func = None" shape=box]
	2394542404624 [label="self.node = None" shape=box]
	2394542404336 [label="self.first_line = content[0][1]" shape=box]
	2394542404768 [label="keyword = self.first_line.split()[0]" shape=box]
	2394542404912 [label="if keyword[-1] == \":\":" shape=diamond]
	2394542405056 [label="keyword = keyword[0:-1]" shape=box]
	2394542405200 [label="if keyword in Keyword_Map:" shape=diamond]
	2394542405344 [label="self.keyword = keyword" shape=box]
	2394542405488 [label="self.node = self.dot.node(str(id(self)), repr(self.first_line)[1:-1], shape = Keyword_Map[keyword][0])" shape=box]
	2394542405632 [label="self.graph_func = Keyword_Map[keyword][1]" shape=box]
	2394542405776 [label="else:" shape=diamond]
	2394542405920 [label="self.node = self.dot.node(str(id(self)), repr(self.first_line)[1:-1], shape = \"box\")" shape=box]
	2394542406208 [label="self.graph_func = generic" shape=box]
	2394542406064 [label="self.children = []" shape=box]
	2394542406352 [label="if len(self.content) != 0:" shape=diamond]
	2394542406496 [label="for i in range(len(self.content)):" shape=diamond]
	2394542406640 [label="if self.content[i][0] == 0:" shape=diamond]
	2394542406784 [label="self.children.append(Block(self.content[i:], self.dot, parent = self))" shape=box]
	2394542407072 [label="def graph(self):" shape=box]
	2394542406928 [label="self.graph_func(self)" shape=box]
	2394542407216 [label="for child in self.children:" shape=diamond]
	2394542407360 [label="child.graph()" shape=box]
	2394542407504 [label="def get_end_leaf(self):" shape=box]
	2394543554640 [label="if len(self.children) == 0:" shape=diamond]
	2394543554784 [label="return self" shape=box]
	2394543554928 [label="else:" shape=diamond]
	2394543555072 [label="return self.children[-1].get_end_leaf()" shape=box]
	2394543555216 [label="def num_indentation(line, i):" shape=box]
	2394543555360 [label="if line[0] == '\\t':" shape=diamond]
	2394543555504 [label="count = 0" shape=box]
	2394543555648 [label="for char in line:" shape=diamond]
	2394543555792 [label="if char == '\\t':" shape=diamond]
	2394543555936 [label="count += 1" shape=box]
	2394543556080 [label="else:" shape=diamond]
	2394543556224 [label=break shape=box]
	2394543556368 [label="return count" shape=box]
	2394543556512 [label="else:" shape=diamond]
	2394543556656 [label="num_intdent = (len(line) - len(line.strip())) / 4" shape=box]
	2394543556800 [label="if not num_intdent.is_integer():" shape=diamond]
	2394543556944 [label="raise IndentationError(f\"Bro. {num_intdent * 4} spaces at line {i}? What is wrong with you?\")" shape=box]
	2394543557232 [label="return int((len(line) - len(line.strip())) / 4)" shape=box]
	2394543557088 [label="def remove_lines(lines):" shape=box]
	2394543557376 [label="open_multiline = False" shape=box]
	2394543557520 [label="for i in reversed(range(len(lines))):" shape=diamond]
	2394543557664 [label="lines[i] = lines[i].rstrip()" shape=box]
	2394543557808 [label="line = lines[i]" shape=box]
	2394543557952 [label="if (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == True:" shape=diamond]
	2394543558096 [label="open_multiline = False" shape=box]
	2394543558240 [label="lines.pop(i)" shape=box]
	2394543558384 [label=continue shape=box]
	2394543558528 [label="elif (line.strip().startswith(\"\\\"\\\"\\\"\") or line.strip().startswith(\"\\\'\\\'\\\'\")) and open_multiline == False:" shape=diamond]
	2394543558672 [label="open_multiline = True" shape=box]
	2394543558816 [label="if open_multiline or len(line) == 0 or line.strip()[0] == '#':" shape=diamond]
	2394543559104 [label="lines.pop(i)" shape=box]
	2394543559248 [label=continue shape=box]
	2394543559392 [label="lines[i] = [num_indentation(line, i + 1), line.strip()]" shape=box]
	2394543559680 [label="def merge_lines(lines):" shape=box]
	2394543559968 [label="open_parentheses = 0" shape=box]
	2394543560112 [label="open_square = 0" shape=box]
	2394543559824 [label="open_curly = 0" shape=box]
	2394543560256 [label="last_state = False" shape=box]
	2394543560400 [label="combined_lines = \"\"" shape=box]
	2394543560544 [label="for i in reversed(range(len(lines))):" shape=diamond]
	2394543560688 [label="open_parentheses += lines[i][1].count(\")\") - lines[i][1].count(\"(\")" shape=box]
	2394543560976 [label="open_square += lines[i][1].count(\"]\") - lines[i][1].count(\"[\")" shape=box]
	2394543561120 [label="open_curly += lines[i][1].count(\"}\") - lines[i][1].count(\"{\")" shape=box]
	2394543561408 [label="if open_parentheses + open_square + open_curly > 0:" shape=diamond]
	2394543561696 [label="combined_lines = lines[i][1] + '\\n' + combined_lines" shape=box]
	2394543561984 [label="lines.pop(i)" shape=box]
	2394543562128 [label="last_state = True" shape=box]
	2394543562272 [label="else:" shape=diamond]
	2394543562416 [label="if last_state == True:" shape=diamond]
	2394543562560 [label="lines[i][1] += '\\n' + combined_lines" shape=box]
	2394543562704 [label="combined_lines = \"\"" shape=box]
	2394543562848 [label="last_state = False" shape=box]
	2394543562992 [label="def main(file_name = __file__):" shape=box]
	2394543563136 [label="try:" shape=diamond]
	2394543563280 [label="with open(file_name, \"r\") as f:" shape=diamond]
	2394543563424 [label="lines = f.readlines()" shape=box]
	2394543563568 [label="except Exception as e:" shape=diamond]
	2394543563712 [label="print(e)" shape=box]
	2394543563856 [label="remove_lines(lines)" shape=box]
	2394543564000 [label="merge_lines(lines)" shape=box]
	2394543564144 [label="dot = graphviz.Digraph()" shape=box]
	2394543564288 [label="blocks = []" shape=box]
	2394543564432 [label="for i in range(len(lines)):" shape=diamond]
	2394543564576 [label="if lines[i][0] == 0:" shape=diamond]
	2394543564720 [label="blocks.append(Block(lines[i:], dot))" shape=box]
	2394543564864 [label="for block in blocks:" shape=diamond]
	2394543565008 [label="block.graph()" shape=box]
	2394543565152 [label="dot.render('graph', view=True)" shape=box]
	2394543565296 [label="if __name__ == \"__main__\":" shape=diamond]
	2394543565440 [label="if len(sys.argv) > 1:" shape=diamond]
	2394543565584 [label="main(sys.argv[1])" shape=box]
	2394543565728 [label="else:" shape=diamond]
	2394543565872 [label="main()" shape=box]
	2394542818032 -> 2394542230736
	2394542230736 -> 2394542231376 [label=yes]
	2394542230736 -> 2394541505152 [label=no]
	2394542231376 -> 2394541505152
	2394541505152 -> 2394541505456
	2394541505456 -> 2394536507248 [label=yes]
	2394541505456 -> 2394539019264 [label=no]
	2394536507248 -> 2394538897488
	2394539019264 -> 2394542269008
	2394538897488 -> 2394542295120
	2394542295120 -> 2394542482896 [label=yes]
	2394542295120 -> 2394542482656 [label=no]
	2394542482896 -> 2394541405200
	2394542482656 -> 2394542451952 [label=yes]
	2394542482656 -> 2394542452176 [label=no]
	2394542451952 -> 2394541405200
	2394542452176 -> 2394543473552
	2394542675888 -> 2394543434768
	2394543434768 -> 2394543434928 [label=yes]
	2394543434768 -> 2394542399152 [label=no]
	2394542399152 -> 2394542399296
	2394542399296 -> 2394542399440 [label=yes]
	2394542399440 -> 2394542399584
	2394542399584 -> 2394542400016 [label=yes]
	2394542400736 -> 2394542400592
	2394542400592 -> 2394542401024
	2394542401024 -> 2394542400880 [label=yes]
	2394542400880 -> 2394542401168
	2394542401168 -> 2394542401456 [label=yes]
	2394542401456 -> 2394542401744
	2394542401744 -> 2394542401600
	2394542401600 -> 2394542401888 [label=yes]
	2394542401600 -> 2394542402176 [label=no]
	2394542401888 -> 2394542402176
	2394542402176 -> 2394542402320 [label=yes]
	2394542402320 -> 2394542402608
	2394542402896 -> 2394542403040
	2394542403040 -> 2394542403184
	2394542403184 -> 2394542403328
	2394542403328 -> 2394542403472
	2394542403472 -> 2394542403616
	2394542403616 -> 2394542403760
	2394542403760 -> 2394542403904 [label=yes]
	2394542403760 -> 2394542404048 [label=no]
	2394542403904 -> 2394542404048
	2394542404192 -> 2394542404480
	2394542404480 -> 2394542404624
	2394542404624 -> 2394542404336
	2394542404336 -> 2394542404768
	2394542404768 -> 2394542404912
	2394542404912 -> 2394542405056 [label=yes]
	2394542404912 -> 2394542405200 [label=no]
	2394542405056 -> 2394542405200
	2394542405200 -> 2394542405344 [label=yes]
	2394542405200 -> 2394542405776 [label=no]
	2394542405632 -> 2394542406064
	2394542405344 -> 2394542405488
	2394542405488 -> 2394542405632
	2394542405776 -> 2394542405920
	2394542405920 -> 2394542406208
	2394542406064 -> 2394542406352
	2394542406352 -> 2394542406496 [label=yes]
	2394542406496 -> 2394542406640
	2394542406640 -> 2394542406784 [label=yes]
	2394542407072 -> 2394542406928
	2394542406928 -> 2394542407216
	2394542407216 -> 2394542407360
	2394542407504 -> 2394543554640
	2394543554640 -> 2394543554784 [label=yes]
	2394543554640 -> 2394543554928 [label=no]
	2394543554928 -> 2394543555072
	2394543555216 -> 2394543555360
	2394543555360 -> 2394543555504 [label=yes]
	2394543555360 -> 2394543556512 [label=no]
	2394543555504 -> 2394543555648
	2394543555648 -> 2394543555792
	2394543555792 -> 2394543555936 [label=yes]
	2394543555792 -> 2394543556080 [label=no]
	2394543556080 -> 2394543556224
	2394543556512 -> 2394543556656
	2394543556656 -> 2394543556800
	2394543556800 -> 2394543556944 [label=yes]
	2394543556800 -> 2394543557232 [label=no]
	2394543556944 -> 2394543557232
	2394543557088 -> 2394543557376
	2394543557376 -> 2394543557520
	2394543557520 -> 2394543557664
	2394543557664 -> 2394543557808
	2394543557808 -> 2394543557952
	2394543557952 -> 2394543558096 [label=yes]
	2394543557952 -> 2394543558528 [label=no]
	2394543558384 -> 2394543558816
	2394543558096 -> 2394543558240
	2394543558240 -> 2394543558384
	2394543558528 -> 2394543558672 [label=yes]
	2394543558528 -> 2394543558816 [label=no]
	2394543558672 -> 2394543558816
	2394543558816 -> 2394543559104 [label=yes]
	2394543558816 -> 2394543559392 [label=no]
	2394543559248 -> 2394543559392
	2394543559104 -> 2394543559248
	2394543559680 -> 2394543559968
	2394543559968 -> 2394543560112
	2394543560112 -> 2394543559824
	2394543559824 -> 2394543560256
	2394543560256 -> 2394543560400
	2394543560400 -> 2394543560544
	2394543560544 -> 2394543560688
	2394543560688 -> 2394543560976
	2394543560976 -> 2394543561120
	2394543561120 -> 2394543561408
	2394543561408 -> 2394543561696 [label=yes]
	2394543561408 -> 2394543562272 [label=no]
	2394543561696 -> 2394543561984
	2394543561984 -> 2394543562128
	2394543562272 -> 2394543562416
	2394543562416 -> 2394543562560 [label=yes]
	2394543562416 -> 2394543562848 [label=no]
	2394543562704 -> 2394543562848
	2394543562560 -> 2394543562704
	2394543562992 -> 2394543563136
	2394543563136 -> 2394543563280
	2394543563280 -> 2394543563424
	2394543563568 -> 2394543563712
	2394543563856 -> 2394543564000
	2394543564000 -> 2394543564144
	2394543564144 -> 2394543564288
	2394543564288 -> 2394543564432
	2394543564432 -> 2394543564576
	2394543564576 -> 2394543564720 [label=yes]
	2394543564864 -> 2394543565008
	2394543565296 -> 2394543565440 [label=yes]
	2394543565440 -> 2394543565584 [label=yes]
	2394543565440 -> 2394543565728 [label=no]
	2394543565728 -> 2394543565872
}
